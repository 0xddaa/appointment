<?php
/**
 * Implements hook_node_info() to provide our appointment_rule type.
 */
function appointment_rule_node_info() {
  return array(
    'appointment_rule' => array(
      'name' => t('Appointment Rule'),
      'base' => 'appointment_rule',
      'description' => t('Use this content type to post rules of appointment system.'),
			'has_title' => TRUE,
			'title_label' => 'Title',
      'help' => t('Enter the rules and the announce for users'),
    ),
  );
}

/**
 * Implements hook_permission().
 */
function appointment_rule_permission() {
  return array(
    'create appointment_rule' => array(
      'title' => t('Create a rule post'),
      'description' => t('Create a rule post'),
    ),
    'edit own rule post' => array(
      'title' => t('Edit own rule post'),
      'description' => t('Edit own rule post'),
    ),
    'edit any rule post' => array(
      'title' => t('Edit any rule post'),
      'description' => t('Edit any rule post'),
    ),
    'delete own rule post' => array(
      'title' => t('Delete own rule post'),
      'description' => t('Delete own rule post'),
    ),
    'delete any rule post' => array(
      'title' => t('Delete any rule post'),
      'description' => t('Delete any rule post'),
    ),
  );
}

/**
 * Implements hook_node_access().
 */

function appointment_rule_node_access($op, $node, $account) {
	if(isset($account))
		$is_author = ($account->uid == $node->uid);
  switch($op) {
    case 'create':
      // Allow if user's role has 'creat joke' permission.
      if (user_access('create rule', $account)) {
        return NODE_ACCESS_ALLOW;
      }
    case 'update':
      // Allow if user's role has 'edit own joke' permission and user is
      // the author; or if the user's role has 'edit any joke' permission.
      if (user_access('edit own rule', $account) && $is_author || user_access('edit any rule', $account)) {
        return NODE_ACCESS_ALLOW;
      }
    case 'delete':
      // Allow if user's role has 'delete own joke' permission and user is
      // the author; or if the user's role has 'delete any joke' permission.
      if (user_access('delete own rule', $account) && $is_author || user_access('delete any rule', $account)) {
        return NODE_ACCESS_ALLOW;
      }
  }
}

/**
	* Implement hook_form() with the standard default form.
*/
function appointment_rule_form($node, $form_state) {
	return node_content_form($node, $form_state);
}

/**
 * Implements hook_validate().
*/
function appointment_rule_validate($node) {
}

/**
* Implements hook_load().
*/
function appointment_rule_load($nodes) {
	// Add a new element to the node at load time for storing the
	// job posting contact information
	foreach ($nodes as $node) {
		$node->contact = "contact infomation";
	}
	return $node;
}

/**
* Implement hook_view().
*/
function appointment_rule_view($node, $view_mode) {
	// Add and theme the contact so it appears when the job post is displayed
	if ($view_mode == 'full') {
		//show annouce by javascirpt
		$announce = 
				"alert('".$node->announce['und'][0]['value']."');";
		if(strlen($node->announce['und'][0]['value'])>0)
			drupal_add_js($announce,'inline');

		$node->content['contact'] = array(
			'#markup' => theme(
				'contact',
				array(
					'contact' => $node->contact,
					'contact_id' => $node->nid
				)
			),
			'#weight' => 100,
		);
	}
	return $node;
}

/**
* Implements hook_theme().
*/
function appointment_rule_theme() {
	// define the variables and template associated with the contact field
	// The contact will contain the name of the contact and the contact_id
	// will be used to create a unique CSS ID
	return array(
		'contact' => array(
			'variables' => array('contact' => NULL, 'contact_id' => NULL),
			'template' => 'contact',
		),
	);
}
