<?php
require_once(DRUPAL_ROOT.'/sites/all/modules/appointment/config.inc');

function appointment_form_menu(){
	$items['appointment_form'] = array(
		'title' => 'Appointment Form',
		'page callback' => 'appointment_form_page',
		'access callback' => 'user_access',
		'access arguments' => array('reserve classroom'),
		'type' => MENU_NORMAL_ITEM
	);
	return $items;
}

function appointment_form_page($aid=null){
	if($aid==null)
		return drupal_get_form('appointment_form_form');
	else{
		$form_state['build_info']['args']=array($aid);
		return drupal_build_form('appointment_form_form',$form_state);
	}
}

function appointment_form_permission(){
	return array(
		'reserve classroom' => array(
			'title' => t('Reserve Classroom'),
			'description' => 'Allow users fill the form to reserve classroom.'
		)
	);
}

function appointment_form_form($form, &$form_state){
	$aid = intval($form_state['build_info']['args'][0]);
	$sql = 'SELECT * FROM appointment WHERE aid='.$aid;
	mysql_real_escape_string($sql);
	$appointment = db_query($sql)->fetchObject();
	$form = array();
	$form['user_info'] =array(
		'#type' => 'fieldset',
		'#title' => t('User Information'),
	);
	$form['user_info']['name'] = array(
		'#type' =>'textfield',
		'#title' =>t('Name'),
		'#default_value'=>$appointment->name,
		'#required'=>TRUE
	);
	$form['user_info']['phone'] = array(
		'#type' =>'textfield',
		'#title' =>t('Phone'),
		'#required'=>TRUE,
		'#default_value'=>$appointment->phone
	);
	$form['user_info']['teacher'] = array(
		'#type' =>'select',
		'#title' =>t('Teacher'),
		'#options'=>get_teacher_list(),
		'#default_value' => $appointment->teacher,
	);
	$sql = 'SELECT * FROM classroom';
	$result = db_query($sql);
	$classrooms = array();
	foreach($result as $row){
		if($row->name != $row->serial)
			$classrooms[$row->cid] = $row->serial.'('.$row->name.')';
		else
			$classrooms[$row->cid] = $row->serial;
	}
	$form['classroom'] = array(
		'#type' =>'select',
		'#title' =>t('Appointment Classroom'),
		'#options'=> $classrooms,
		'#default_value' => $appointment->cid,
	);
	if($aid)
		$tmp = explode('-',$appointment->date);
	else
		$tmp = explode('-',date('Y-m-d'));
	$date = array('year'=>$tmp[0],'month'=>intval($tmp[1]),'day'=>intval($tmp[2]));
	$form['date'] = array(
		'#type' => 'date',
		'#title' => t('Appointment Date'),
		'#default_value' => $date
	);
	$form['start_period'] = array(
		'#type' =>'select',
		'#title' =>t('Start Period'),
		'#options'=>get_period(),
		'#default_value'=>$appointment->start_period
	);
	$form['end_period'] = array(
		'#type' =>'select',
		'#title' =>t('End Period'),
		'#options'=>get_period(),
		'#default_value'=>$appointment->end_period
	);
	$form['note'] = array(
		'#type' =>'textfield',
		'#title' =>t('Note'),
		'#default_value'=>$appointment->note
	);
	$form['submit'] = array(
		'#type'=>'submit',
		'#value'=>'Submit',
		'#submit'=>array('appointment_form_form_submit'),
	);
	return $form;
}

function appointment_form_form_submit($form_id, &$form_state){
	$aid = intval($form_state['build_info']['args'][0]);
	if(check_data_logic($form_state) && check_data_legal($form_state)){
		if($aid){
			check_data_conflict($form_state,'edit');
			save_appointment($form_state,$aid);
		}
		else{	
			check_data_conflict($form_state,'save');
			save_appointment($form_state);
		}
	}
}

function save_appointment($form_state,$aid=null){
	global $user;
	$appointment_date = 
		$form_state['values']['date']['year'].'-'.
		$form_state['values']['date']['month'].'-'.
		$form_state['values']['date']['day'];

	$save = "INSERT INTO `appointment` SET ";
	$edit = "UPDATE `appointment` SET ";
	$fields = "
		time = now(),
		cid =".$form_state['values']['classroom'].",
		date ='".$appointment_date."',
		start_period =".$form_state['values']['start_period'].",
		end_period =".$form_state['values']['end_period'].",
		account ='".$user->name."',
		name ='".$form_state['values']['name']."',
		phone ='".$form_state['values']['phone']."',
		teacher ='".$form_state['values']['teacher']."',
		note = '".$form_state['values'][note]."'";
	global $user;
	if($user->name =='csieoffice')
		$fields .= ", priority = 1";
	$condition = " WHERE aid=$aid";

	$sql='';
	if($aid)
		$sql = $edit.$fields.$condition;
	else
		$sql = $save.$fields;
	
	mysql_real_escape_string($sql);
	db_query($sql);
	drupal_goto('my_list');
}

function check_data_conflict($form_state,$state){
	$appointment_date = 
		$form_state['values']['date']['year'].'-'.
		$form_state['values']['date']['month'].'-'.
		$form_state['values']['date']['day'];
	$date_condition = "date='$appointment_date'";
	$weekday_condition = "weekday=".date('w',mktime(0,0,0,$form_state['month'],$form_state['day'],$form_state['year']));
	$serial_condition = "cid=".$form_state['values']['classroom'];
	$period_condition = '';

	for($i=$form_state['values']['start_period'];$i<=$form_state['values']['end_period'];$i++){
  	if($i!=$form_state['values']['start_period'])
  		$period_condition .=' OR ';
  	$period_condition .= "(start_period<=$i AND end_period>=$i)";
	}
	$period_condition = '('.$period_condition.')';	

	$appointment_sql = 'SELECT aid,priority FROM `appointment` WHERE '.$date_condition.' AND '.$serial_condition.' AND '.$period_condition;
	$course_sql = 'UNION ALL SELECT id,priority FROM course_schedule WHERE '.$weekday_condition.' AND '.$serial_condition.' AND '.$period_condition;
	$sql = $appointment_sql.' '.$course_sql;
	mysql_real_escape_string($sql);
	$result = db_query($sql)->fetchAssoc();

	if($result==null)
		return true;

	/* find someone has reserved the period or has course
		0=course 1=csieoffice
    other number not defined */
	else if ($result['priority'] == 0){
		drupal_set_message('has course!','error');
		return false;
	} 
	else if ($result['priority'] > 0){
		//if edit appointment  , ignore conflict
		if($state=='edit') return true;
		drupal_set_message('has reserved!','error');
		return false;
	}
}

function check_data_legal($form_state){
	//check length
	if(strlen($form_state['values']['name'])>32){
		form_set_error('name','name over 32 length');
		return false;
	}
	if(strlen($form_state['values']['phone'])>10){
		form_set_error('name','phone over 10 length');
		return false;
	}
	return true;
}

function check_data_logic($form_state){
	$year = $form_state['values']['date']['year'];
	$month = $form_state['values']['date']['month'];
	$day = $form_state['values']['date']['day'];
	$date = date('Y-m-d',mktime(0,0,0,$month,$day,$year));
	$start_period = $form_state['values']['start_period'];
	$end_period = $form_state['values']['end_period'];


	//past time
	$tmp1 = mktime(0,0,0,$month,$day,$year);
	$tmp2 = mktime(0,0,0,date('n'),date('j'),date('Y'));
	if ($tmp2 > $tmp1){
		form_set_error('date','past time');
		return false;
	}
	//only current month
	if($month != date('n')){
		form_set_error('date','not curreent month');
		return false;	
	}

	//weekend
	$weekday = date('w',mktime(0,0,0,$month,$day,$year));
	if($weekday == 0 || $weekday == 6){
		form_set_error('date','weekend');
		return false;
	}

	//holiday
	$sql = 'SELECT * FROM restriction WHERE type=\'holiday\'';
	$result = db_query($sql);
	foreach($result as $row){
		if($date == $row->start_date){
			form_set_error('date','It\'s holiday');
			return false;
		}
	}

	//special time
	$sql = 'SELECT * FROM restriction WHERE type=\'special\'';
	$result = db_query($sql);
	foreach($result as $row){
		if($date >= $row->start_date && $date <= $row->end_date){
			for($i=$start_period;$i<=$end_period;$i++){
				if($i>=$row->start_period && $i<=$row->end_period){
					form_set_error('date','It\'s special time.'."\n".'Please read the rule');
					return false;
				}
			}
		}
	}

	//fake phone
	if(!preg_match("/^\d+$/",$form_state['values']['phone']) ||
			strlen($form_state['values']['phone'])<9){
		form_set_error('phone','fake phone');
		return false;	
	}	

	//period error
	if($form_state['values']['start_period'] > 
			$form_state['values']['end_period']){
		form_set_error('period','period error');
		return false;
	}
	return true;
}
